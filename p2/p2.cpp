// p2.cpp : Defines the entry point for the console application.
//

#include "stdafx.h"

#include <algorithm>
#include <iterator>
#include <numeric>
#include <vector>

#include "utils/utils.h"
#include "utils/utils_inl.h"

const int MAX_VAL = static_cast<int>(4e6);

/* Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.*/

template<typename T>
void PopulateSequence(T& vec)
{
    while (vec.back() + vec.end()[-2] <= MAX_VAL)
    {
        vec.push_back(vec.back() + vec.end()[-2]);
    }
}

template<typename T>
T Simple()
{
    typedef std::vector<T> TVec;

    TVec vec{1, 2};
    PopulateSequence(vec);

    TVec vecEvenTerms;
    std::copy_if(vec.begin(), vec.end(), std::back_inserter(vecEvenTerms), [](auto i) { return i % 2 == 0; });

    return std::accumulate(vecEvenTerms.begin(), vecEvenTerms.end(), 0);
}

int main()
{
    Profile([]() { Print(Simple<int>()); });

    return 0;
}

